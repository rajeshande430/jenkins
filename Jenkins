------------------------------------------------
JENKINS 	
------------------------------------------------
jenkins is nothing but a scheduler.
in linux if we want to install some repeated tasks we create cronjobs, using cronjobs we can schedule the jobs.
jenkins can run anything as long as it is command line.

cronjobs+steroids = jenkins

steroids is an additional funtionality which enables to notify if something goes wrong in the jobs

jenkins widely used for CIntegration & Cdevelopment Cdevelopment engines

jenkins executes commands on server inorder to do the same jenkins needs the following
		user (which user has to run is organization control) (some companies uses service accounts)
		privilages
		path
default user user for jenkins is JENKIN

what is service accounts ? ? ?
			



------------------------------------------------
PLUGIN - 2nd flavor of jenkins - installing the plugin is not installing the software
------------------------------------------------
additional functionality + UI support to jenkins
plugin is written in java

(for some applications installations our developers might not write the installation steps in command line in this cases we use something called PLUGINS,
in that case developers write plugin code and they say with this plugin in jenkin we can install the software.)

the way plugins are developed are changes from one system to system

---------------------------------------------------
Installation of Jenkins in different environments
	jenkin supports the below versions
	2.164 (2019-02) and newer: Java 8 or Java 11
	2.54 (2017-04) and newer: Java 8
	1.612 (2015-05) and newer: Java 7
---------------------------------------------------
WINDOWS
---------------------------------------------------
	run powershell as admin
	choco install jre8
	open the URL https://jenkins.io/download/ & download the windows supported jenkins package and install it
	java -jar .\jenkins.war
	after installation, please note down the administratot code from the powershell which will be required as a first login to the console
	http://localhost:8080
--------------------------------------------------------------------------------------------------------
UBUNTU 18.4 (URL https://www.digitalocean.com/community/tutorials/how-to-install-jenkins-on-ubuntu-18-04)
--------------------------------------------------------------------------------------------------------
	sudo apt-get update
	wget -q -O - https://pkg.jenkins.io/debian/jenkins-ci.org.key | sudo apt-key add -
	sudo sh -c 'echo deb http://pkg.jenkins.io/debian-stable binary/ > /etc/apt/sources.list.d/jenkins.list'
		sudo apt-get update
	sudo apt-get install jenkins
	
	sudo systemctl status jenkins
Incase if the service not running use the below command
	sudo systemctl start jenkins
	
	sudo cat /var/lib/jenkins/secrets/initialAdminPassword

what happens once jenkins installed.
	1. user called jenkins will be created
	2. jenkins installation directory will /var/lib/jenkins
	3. all projects or jobs that we create using the GUI will be under the following path /var/lib/jenkins/jobs/<jobname1>
	4. once the project is created, a config.xml file will be created under /var/lib/jenkins/jobs/<jobname1>/config.xml
	5. once we run the project jobname1, a workspace folder will be created under the following path /var/lib/jenkins/workspace/<jobname1>
	   all the job information will be stored under the worspace directory
	6. target folder also creates in the same folder /var/lib/jenkins/workspace/target
	
git merge <branch> - all the commits that are created under branch will be updated at master git login
example	:	git checkout <branch>
		:	git log
					B5
					B4
					B3
					B2
					B1
			git checkout <master>
			git log
					M2
					M1
			git merge <branch>
			git log
					B5
					B4
					B3
					B2
					B1
					M2
					M1
git rebase <master>
git rebase -i HEAD~3
edit
drop
git commit --amend
git rebase --continue

git cherry-pick <commitid>
git cherry-pick <CID3..CID1>
-----------------------------------------------------------------------------
FREESTYLE & PIPELINE

freestyle cannot be version controlled but pipeline can be version controlled.

-----------------------------------------------------------------------------
DISTRIBUTED BUILDS | linux master to linux node we connect using ssh	
				   | linux master to windows node we connect using JNLP (java network launching protocol)
-----------------------------------------------------------------------------
jenkins pipeline

what is pipeline ?
it is nothing but scripted jenkins
for scripting this, we can use a language called groovy, groovy is a java based language.
it is not necessary that the script present in jenkins, it can be present in git repository.
whenever jenkins building, it can read the script from the git repository and build the acctivity.
if i have any change in the build, it can be version controlled automatically.
the scripting laguage which we write in the pipeline is GROOVY, from groovy we can call scripts or python 

COMPONENTS OF PIPELINE
					1. Node 
					2. stage
	ubuntu is label
node('ubuntu'){
}

stage('build process'){
}
-----------------------------------------------------------------------------
							node('ubuntu')
							{
								stage('git')
								{
									// something
								}
								stage('packaging')
								{
									//packaging commands
								}
							}	

in jenkins pipeline, we can see the stage wise logs
-----------------------------------------------------------------------------
PARAMETERS - it is nothing but a variable
-----------------------------------------------------------------------------
	function add()
	{
	return 4+5
	}
	
					function add(a=4,b=5)
					{
					return a+b
					}

this project is parameterized - string parameter
echo $branch_name
sh ./upload.sh $username $password

if we are using a parameter in updtream and downstream jobs, we need to install a plugin called parametorized plugin
	
----------------------------------------------------------------------------
adding NODES to the JENKINS MASTER - java and maven 
----------------------------------------------------------------------------
1.				root@ip-172-31-17-221:~# adduser jenkins or service accounts
				Adding user `jenkins' ...
				Adding new group `jenkins' (1001) ...
				Adding new user `jenkins' (1001) with group `jenkins' ...
				Creating home directory `/home/jenkins' ...
				Copying files from `/etc/skel' ...
				Enter new UNIX password:
				Retype new UNIX password:
				passwd: password updated successfully
				Changing the user information for jenkins
				Enter the new value, or press ENTER for the default
						Full Name []:
						Room Number []:
						Work Phone []:
						Home Phone []:
						Other []:
				Is the information correct? [Y/n] y
				
2.				root@ip-172-31-17-221:~# visudo			
				# Members of the admin group may gain root privileges
				%admin ALL=(ALL) ALL
				jenkins ALL=(ALL:ALL) NOPASSWD:ALL
							or
				usermod -aG group user
				
3. 				root@ip-172-31-17-221:~# vi /etc/ssh/sshd_config				
				# To disable tunneled clear text passwords, change to no here!
				PasswordAuthentication yes
				#PermitEmptyPasswords no

4. 				root@ip-172-31-17-221:~# service ssh restart
5. 	try logging into the machine using ssh jenkins@ipaddress and see if the jenkins user is asking for a password for authentication, please makesure
	the below softwares must be present because we are packaging the code using maven software
	java
	maven

6. once the job is finished, if we run on any label (means on any connected node), /home/jenkins/workspace/target/surefire-reports
																				   /home/jenkins/workkspace
	once the node is connected, remoting.jar file will be downloaded on the node and it internally uses JNLP.
7. connecting the jenkins node to the master using KNOW HOST FILE VERIFICATION STRATEGY
	we need to login to the jenkins node from master through ssh, while logging it ask for adding permenantly to the host file, where the jenkins node ip address details will be added to the .ssh/known_host file list and we need to copy this known_host file from master to the jenkins slave also called as jenkins master, use the below commands to copy the same
	scp .ssh/known_host ubuntu@ipaddress:/home/jenkins
	
	
mvn compile
mvn test
mvn package

code -> git server ->
CIntegration
CDeploy
Cdelivery
-----------------------------------------------------------------------------
BUILD PERIODICALLY
-----------------------------------------------------------------------------
(0–59)  (0–23)  (1–31) (1–12)    The day of the week (0–7) where 0 and 7 are Sunday
MINUTE  HOUR    DOM	   MONTH	DOW 

* * * *   -> every minute

------------------------------------------------------------------------------
POLL SCM  - whenever any change happens in git, build job automatically triggers
------------------------------------------------------------------------------
(0–59)  (0–23)  (1–31) (1–12)    The day of the week (0–7) where 0 and 7 are Sunday
MINUTE  HOUR    DOM	   MONTH	DOW 

* * * *   -> every minute

for 500 developers we will schedule with the * * * * * 
for 20 developers we can use poll scm due to samll number of employes, whenever we get the commit automatically jod triggers






	
	
	

